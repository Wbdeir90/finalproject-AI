import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

// Represents a task to be completed by a child
class Task {
    private String name;
    private boolean completed;
    private Child assignedTo;

    public Task(String name, Child assignedTo) {
        this.name = name;
        this.assignedTo = assignedTo;
        this.completed = false;
    }

    public String getName() {
        return name;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void markAsCompleted() {
        completed = true;
    }

    public Child getAssignedTo() {
        return assignedTo;
    }
}

// Represents a child with tasks and achievements
class Child {
    private String name;
    private List<Task> tasks;
    private int achievements;
    private String username;
    private int age;

    public Child(String name, String username, int age) {
        this.name = name;
        this.username = username;
        this.age = age;
        this.tasks = new ArrayList<>();
        this.achievements = 0;
    }

    // Setter method for username
    public void setUsername(String username) {
        this.username = username;
    }

    // Getter method for username
    public String getUsername() {
        return username;
    }

    // Method to assign a task to the child
    public void assignTask(String taskName, Child childn) {
        Task task = new Task(taskName, childn);
        tasks.add(task);
    }

    // Method to get the list of tasks assigned to the child
    public List<Task> getTasks() {
        return tasks;
    }

    // Method to mark a task as completed and increment achievements
    public void completeTask(Task task) {
        task.markAsCompleted();
        achievements++;
    }

    // Getter method for achievements
    public int getAchievements() {
        return achievements;
    }

    // Method to suggest a prize based on achievements
    public String suggestPrize() {
        int achievements = getAchievements();
        if (achievements >= 5) {
            return "Great job! You've earned a special prize!\n 'Later bedtime, Stickers, Candy, and Ice cream'";
        } else if (achievements >= 3) {
            return "Well done! You deserve a small treat!";
        } else {
            return "Keep up the good work!";
        }
    }

    // Override toString method to display child's name
    @Override
    public String toString() {
        return "Child:" + name;
    }

    // Getter method for child's name
    public String getName() {
        return name;
    }
}

// Represents a parent with children and authentication
class Parent {
    private String username;
    private String password;
    private List<Child> children;

    public Parent(String username, String password) {
        this.username = username;
        this.password = password;
        this.children = new ArrayList<>();
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public void addChild(String name, int age) {
        children.add(new Child(name, name, age));
    }

    public List<Child> getChildren() {
        return children;
    }

    @Override
    public String toString() {
        return "Parent:" + username;
    }

    public boolean authenticate(String username, String password) {
        return this.username.equals(username) && this.password.equals(password);
    }
}

// Represents a dialog for assigning tasks to a child
class TaskAssignmentDialog extends JDialog {
    private Child child;
    private DefaultListModel<Task> taskListModel;

    public TaskAssignmentDialog(JFrame parent, Child child) {
        super(parent, "Assign Task to " + child.getName(), true);
        this.child = child;
        this.taskListModel = new DefaultListModel<>();

        initialize();
    }

    private void initialize() {
        setLayout(new BorderLayout());

        JList<Task> taskList = new JList<>(taskListModel);
        JScrollPane scrollPane = new JScrollPane(taskList);

        JPanel buttonPanel = new JPanel();
        JButton assignButton = new JButton("Assign Task");
        JButton closeButton = new JButton("Close");

        assignButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String taskName = JOptionPane.showInputDialog(TaskAssignmentDialog.this, "Enter task name:");
                if (taskName != null && !taskName.isEmpty()) {
                    child.assignTask(taskName, child);
                    updateTaskList();
                }
            }
        });

        closeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        buttonPanel.add(assignButton);
        buttonPanel.add(closeButton);

        add(scrollPane, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        updateTaskList();

        setSize(300, 200);
        setLocationRelativeTo(null);
    }

    public void updateTaskList() {
        taskListModel.clear();
        for (Task task : child.getTasks()) {
            taskListModel.addElement(task);
        }
    }
}

public class ChildTaskTrackingApp {
    private JFrame frame;
    private Parent currentParent;
    private List<Parent> parentsList = new ArrayList<>();
    private JComboBox<String> childSelectionCombo;
    private List<String> childNames = new ArrayList<>();
    private static ChildTaskTrackingApp instance;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ChildTaskTrackingApp.getInstance();
        });
    }

    public static ChildTaskTrackingApp getInstance() {
        if (instance == null) {
            instance = new ChildTaskTrackingApp();
        }
        return instance;
    }

    private ChildTaskTrackingApp() {
        frame = new JFrame("Child Task Tracking App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        currentParent = null;
        frame.setVisible(true);
        createLoginPanel();
    }

    private void createChildPanel() {
        JPanel childPanel = new JPanel();
        childPanel.setLayout(new GridLayout(4, 1));

        JButton backButton = new JButton("Back");
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createParentPanel();
            }
        });

        JButton assignTaskButton = new JButton("Assign Task");
        assignTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();
                Child selectedChildObject = null;

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        TaskAssignmentDialog dialog = new TaskAssignmentDialog(frame, child);
                        dialog.updateTaskList();
                        dialog.setVisible(true);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        childPanel.add(assignTaskButton);
        childPanel.add(backButton);
        childPanel.add(exitButton);

        frame.setContentPane(childPanel);
        frame.revalidate();
        frame.repaint();
        frame.setVisible(true);
    }

    private void createParentPanel() {
        JPanel parentPanel = new JPanel();
        parentPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

        createAddChildPanel();
        createAssignTaskPanel();
        createSwitchToChildButton();
        createTrackAchievementButton();
        createSuggestPrizeButton();
        createExitButton();

        frame.setContentPane(parentPanel);
        frame.revalidate();
        frame.repaint();
        frame.setVisible(true);
    }

    private void createAddChildPanel() {
        JPanel addChildPanel = new JPanel();
        JLabel childNameLabel = new JLabel("Child's Name:");
        JTextField childNameField = new JTextField(20);
        JLabel ageLabel = new JLabel("Age:");
        JTextField ageField = new JTextField(5);

        JButton addChildButton = new JButton("Add Child");
        addChildButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String childName = childNameField.getText();
                String ageText = ageField.getText();
                if (!childName.isEmpty() && !ageText.isEmpty()) {
                    try {
                        int age = Integer.parseInt(ageText);
                        currentParent.addChild(childName, age);
                        childSelectionCombo.addItem(childName);
                        JOptionPane.showMessageDialog(frame, "Child added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(frame, "Invalid age. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(frame, "Child name and age cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        addChildPanel.add(childNameLabel);
        addChildPanel.add(childNameField);
        addChildPanel.add(ageLabel);
        addChildPanel.add(ageField);
        addChildPanel.add(addChildButton);
    }

    private void createAssignTaskPanel() {
        JPanel assignTaskPanel = new JPanel();
        JButton assignTaskButton = new JButton("Assign Task");

        assignTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();
                Child selectedChildObject = null;

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        TaskAssignmentDialog dialog = new TaskAssignmentDialog(frame, child);
                        dialog.updateTaskList();
                        dialog.setVisible(true);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        childSelectionCombo = new JComboBox<>();

        for (Parent parent : parentsList) {
            for (Child child : parent.getChildren()) {
                childSelectionCombo.addItem(child.getName());
            }
        }

        assignTaskPanel.add(childSelectionCombo);
        assignTaskPanel.add(assignTaskButton);
    }

    private void createSwitchToChildButton() {
        JButton switchToChildButton = new JButton("Switch to Child Panel");
        switchToChildButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createChildPanel();
            }
        });
    }

    private void createTrackAchievementButton() {
        JButton trackAchievementButton = new JButton("Track Achievement");
    }

    private void createSuggestPrizeButton() {
        JButton suggestPrizeButton = new JButton("Suggest Prize");

        suggestPrizeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        String prizeSuggestion = child.suggestPrize();
                        JOptionPane.showMessageDialog(frame, prizeSuggestion, "Prize Suggestion", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
    }

    private void createExitButton() {
        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
    }
}

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            ChildTaskTrackingApp.getInstance();
        });
    }
}
