import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

public class TaskAssignmentDialog2 extends JDialog {
    private static final long serialVersionUID = 1L;
    private Child child;
    private JTextField taskNameField;
    private JComboBox<String> ageGroupComboBox;
    private JTextArea taskListTextArea;
    private Map<String, List<String>> tasksByAge;
    private Map<String, Map<String, Boolean>> taskStatusByAge;

    public TaskAssignmentDialog2(JFrame parentFrame, Child child) {
        super(parentFrame, "Assign Tasks to Child", true);
        this.child = child;
        taskNameField = new JTextField(20);
        tasksByAge = createTasksByAgeMap();
        taskStatusByAge = createTaskStatusByAgeMap();

        ageGroupComboBox = new JComboBox<>(tasksByAge.keySet().toArray(new String[0]));

        JButton assignButton = new JButton("Assign Task");
        taskListTextArea = new JTextArea(5, 20);
        taskListTextArea.setEditable(false);

        ageGroupComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTaskList();
            }
        });

        assignButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedAgeGroup = (String) ageGroupComboBox.getSelectedItem();
                Map<String, Boolean> taskStatus = taskStatusByAge.get(selectedAgeGroup);

                for (String task : tasksByAge.get(selectedAgeGroup)) {
                    if (!taskStatus.containsKey(task)) {
                        taskStatus.put(task, false);
                    }
                }
                TaskSelectionDialog selectionDialog = new TaskSelectionDialog(parentFrame, tasksByAge.get(selectedAgeGroup), taskStatus);
                selectionDialog.setVisible(true);

                taskStatusByAge.put(selectedAgeGroup, selectionDialog.getTaskStatus());

                updateTaskList();
                checkIfChildIsDone();
            }
        });

        JPanel panel = new JPanel(new GridLayout(4, 1));
        panel.add(new JLabel("Choose Child's Age Range:"));
        panel.add(ageGroupComboBox);
        panel.add(assignButton);
        panel.add(new JScrollPane(taskListTextArea));
        getContentPane().add(panel);
        pack();
        setLocationRelativeTo(null);
        updateTaskList();
    }

    void updateTaskList() {
        String selectedAgeGroup = (String) ageGroupComboBox.getSelectedItem();
        List<String> tasks = tasksByAge.get(selectedAgeGroup);
        Map<String, Boolean> taskStatus = taskStatusByAge.get(selectedAgeGroup);

        if (taskStatus == null) {
            taskStatus = new HashMap<>();
            taskStatusByAge.put(selectedAgeGroup, taskStatus);
        }

        StringBuilder taskList = new StringBuilder();
        for (String task : tasks) {
            Boolean isDone = taskStatus.get(task);
            if (isDone == null) {
                isDone = false;
                taskStatus.put(task, isDone);
            }
            String status = isDone ? "[Done]" : "[Not Done]";
            taskList.append(status).append(" ").append(task).append("\n");
        }
        taskListTextArea.setText(taskList.toString());
    }

    private void checkIfChildIsDone() {
        boolean allTasksDone = true;

        for (Map<String, Boolean> taskStatus : taskStatusByAge.values()) {
            for (boolean isDone : taskStatus.values()) {
                if (!isDone) {
                    allTasksDone = false;
                    break;
                }
            }
        }

        if (allTasksDone) {
            JOptionPane.showMessageDialog(this, "Congratulations! You have completed all tasks!", "Task Completion", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private Map<String, List<String>> createTasksByAgeMap() {
        Map<String, List<String>> tasksByAge = new HashMap<>();

        tasksByAge.put("3-6", List.of(
                "Make their bed",
                "Empty wastebaskets",
                "Bring in mail or newspaper",
                "Clear table",
                "Pull weeds, if you have a garden",
                "Water flowers"
        ));

        tasksByAge.put("7-9", List.of(
                "Load dishwasher",
                "Put away groceries",
                "Vacuum",
                "Help make dinner",
                "Make own snacks",
                "Wash table after meals",
                "Put away own laundry"
        ));

        tasksByAge.put("10-12", List.of(
                "Unload dishwasher",
                "Fold laundry",
                "Clean bathroom",
                "Wash windows",
                "Cook simple meal with supervision",
                "Iron clothes",
                "Do laundry"
        ));

        return tasksByAge;
    }

    private Map<String, Map<String, Boolean>> createTaskStatusByAgeMap() {
        Map<String, Map<String, Boolean>> taskStatusByAge = new HashMap<>();

        for (String ageGroup : tasksByAge.keySet()) {
            taskStatusByAge.put(ageGroup, new HashMap<>());
        }

        return taskStatusByAge;
    }
}

class TaskSelectionDialog extends JDialog {
    private static final long serialVersionUID = 1L;
    private Map<String, Boolean> taskStatus;

    public TaskSelectionDialog(JFrame parentFrame, List<String> tasks, Map<String, Boolean> initialTaskStatus) {
        super(parentFrame, "Select Tasks", true);
        this.taskStatus = new HashMap<>(initialTaskStatus);

        JPanel panel = new JPanel(new GridLayout(0, 1));

        for (String task : tasks) {
            JCheckBox checkBox = new JCheckBox(task, taskStatus.get(task));
            panel.add(checkBox);
        }

        JButton doneButton = new JButton("Done");
        doneButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                for (Component component : panel.getComponents()) {
                    if (component instanceof JCheckBox) {
                        JCheckBox checkBox = (JCheckBox) component;
                        taskStatus.put(checkBox.getText(), checkBox.isSelected());
                    }
                }
                dispose();
            }
        });

        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(new JScrollPane(panel), BorderLayout.CENTER);
        getContentPane().add(doneButton, BorderLayout.SOUTH);

        pack();
        setLocationRelativeTo(null);
    }

    public Map<String, Boolean> getTaskStatus() {
        return taskStatus;
    }
}

// Represents a panel for tracking child achievements
class AchievementTrackingPanel extends JFrame {
    private static final long serialVersionUID = 1L;
    private Parent currentParent;

    public AchievementTrackingPanel(Parent parent) {
        this.currentParent = parent;
        setTitle("Achievement Tracking");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        createAchievementList();
    }

    private void createAchievementList() {
        JPanel achievementPanel = new JPanel();
        achievementPanel.setLayout(new GridLayout(0, 2));

        for (Child child : currentParent.getChildren()) {
            int achievedCount = countAchievedTasks(child);
            JLabel childLabel = new JLabel(child.getName() + ":");
            JLabel countLabel = new JLabel(String.valueOf(achievedCount));
            childLabel.setHorizontalAlignment(SwingConstants.CENTER);
            countLabel.setHorizontalAlignment(SwingConstants.CENTER);
            achievementPanel.add(childLabel);
            achievementPanel.add(countLabel);
        }
        getContentPane().add(achievementPanel);
    }

    private int countAchievedTasks(Child child) {
        List<Task> tasks = child.getTasks();
        int achievedCount = 0;
        for (Task task : tasks) {
            if (task.isCompleted()) {
                achievedCount++;
            }
        }
        return achievedCount;
    }
}

// Main application class
public class ChildTaskTrackingApp {
    private JFrame frame;
    private Parent currentParent;
    private List<Parent> parentsList = new ArrayList<>();
    private JTextField newUsernameField;
    private JPasswordField newPasswordField;
    private List<Child> childrenList = new ArrayList<>();
    private Child currentChild;
    private JComboBox<String> childSelectionCombo;
    private List<String> childNames = new ArrayList<>();
    private static ChildTaskTrackingApp instance;

    public ChildTaskTrackingApp() {
        frame = new JFrame("Child Task Tracking App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        currentParent = null;
        currentChild = null;
        frame.setVisible(true);
        createLoginPanel();
    }

    public void addChildName(String name) {
        childNames.add(name);
    }

    public static ChildTaskTrackingApp getInstance() {
        if (instance == null) {
            instance = new ChildTaskTrackingApp();
        }
        return instance;
    }

    private void createChildPanel() {
        JPanel childPanel = new JPanel();
        childPanel.setLayout(new GridLayout(4, 1));

        JButton backButton = new JButton("Back");
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createParentPanel();
            }
        });

        JButton assignTaskButton = new JButton("Assign Task");
        assignTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();
                Child selectedChildObject = null;

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        TaskAssignmentDialog2 dialog = new TaskAssignmentDialog2(frame, child);
                        dialog.updateTaskList();
                        dialog.setVisible(true);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        childPanel.add(assignTaskButton);
        childPanel.add(backButton);
        childPanel.add(exitButton);

        frame.setContentPane(childPanel);
        frame.revalidate();
        frame.repaint();
        frame.setVisible(true);
    }

    private void createParentPanel() {
        JPanel parentPanel = new JPanel();
        parentPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

        JPanel addChildPanel = new JPanel();
        JLabel childNameLabel = new JLabel("Child's Name:");
        JTextField childNameField = new JTextField(20);

        JButton addChildButton = new JButton("Add Child");
        addChildButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String childName = JOptionPane.showInputDialog(frame, "Enter child's name:");
                if (childName != null && !childName.isEmpty()) {
                    currentParent.addChild(childName);
                    childSelectionCombo.addItem(childName);
                } else {
                    // Handle empty or canceled input
                    JOptionPane.showMessageDialog(frame, "Invalid child name.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JPanel assignTaskPanel = new JPanel();
        JButton assignTaskButton = new JButton("Assign Task");

        assignTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();
                Child selectedChildObject = null;

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        TaskAssignmentDialog2 dialog = new TaskAssignmentDialog2(frame, child);
                        dialog.updateTaskList();
                        dialog.setVisible(true);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton switchToChildButton = new JButton("Switch to Child Panel");
        switchToChildButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createChildPanel();
            }
        });

        JButton trackAchievementButton = new JButton("Track Achievement");
        childSelectionCombo = new JComboBox<>();

        for (Parent parent : parentsList) {
            for (Child child : parent.getChildren()) {
                childSelectionCombo.addItem(child.getName());
            }
        }

        assignTaskPanel.add(childSelectionCombo);

        JButton suggestPrizeButton = new JButton("Suggest Prize");

        suggestPrizeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        String prizeSuggestion = child.suggestPrize();
                        JOptionPane.showMessageDialog(frame, prizeSuggestion, "Prize Suggestion", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        parentPanel.add(addChildPanel);
        parentPanel.add(addChildButton);
        parentPanel.add(assignTaskPanel);
        parentPanel.add(switchToChildButton);
        parentPanel.add(trackAchievementButton);
        parentPanel.add(suggestPrizeButton);
        parentPanel.add(exitButton);

        frame.setContentPane(parentPanel);
        frame.revalidate();
        frame.repaint();
        frame.setVisible(true);
    }
}
