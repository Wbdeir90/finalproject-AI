package com.example.childtask;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Represents a task to be completed by a child
class Task {
    private String name;
    private boolean completed;
    private Child assignedTo;

    public Task(String name, Child assignedTo) {
        this.name = name;
        this.assignedTo = assignedTo;
        this.completed = false;
    }

    public String getName() {
        return name;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void markAsCompleted() {
        completed = true;
    }

    public Child getAssignedTo() {
        return assignedTo;
    }
}

// Represents a child with tasks and achievements
class Child {
    private String name;
    private List<Task> tasks;
    private int achievements;
    private String username;
    private int age;

    public Child(String name, String username) {
        this.name = name;
        this.username = username;
        this.tasks = new ArrayList<>();
        this.achievements = 0;
    }

    // Setter method for username
    public void setUsername(String username) {
        this.username = username;
    }

    // Getter method for username
    public String getUsername() {
        return username;
    }

    // Method to assign a task to the child
    public void assignTask(String taskName, Child childn) {
        Task task = new Task(taskName, childn);
        tasks.add(task);
    }

    // Method to get the list of tasks assigned to the child
    public List<Task> getTasks() {
        return tasks;
    }

    // Method to mark a task as completed and increment achievements
    public void completeTask(Task task) {
        task.markAsCompleted();
        achievements++;
    }

    // Getter method for achievements
    public int getAchievements() {
        return achievements;
    }

    // Method to suggest a prize based on achievements
    public String suggestPrize() {
        int achievements = getAchievements();
        if (achievements >= 5) {
            return "Great job! You've earned a special prize!\n 'Later bedtime, Stickers, Candy, and Ice cream'";
        } else if (achievements >= 3) {
            return "Well done! You deserve a small treat!";
        } else {
            return "Keep up the good work!";
        }
    }

    // Override toString method to display child's name
    @Override
    public String toString() {
        return "Child:" + name;
    }

    // Getter method for child's name
    public String getName() {
        return name;
    }
}

// Represents a parent with children and authentication
class Parent {
    private String username;
    private String password;
    private List<Child> children;

    public Parent(String username, String password) {
        this.username = username;
        this.password = password;
        this.children = new ArrayList<>();
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public void addChild(String name) {
        children.add(new Child(name, name));
    }

    public List<Child> getChildren() {
        return children;
    }

    @Override
    public String toString() {
        return "Parent:" + username;
    }

    public boolean authenticate(String username, String password) {
        return this.username.equals(username) && this.password.equals(password);
    }
}

// Represents a dialog for assigning tasks to a child

    private void createLoginPanel() {
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayout(3, 2));

        JLabel usernameLabel = new JLabel("Username:");
        JLabel passwordLabel = new JLabel("Password:");
        usernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        passwordLabel.setHorizontalAlignment(SwingConstants.CENTER);

        JTextField usernameField = new JTextField(20);
        JPasswordField passwordField = new JPasswordField(20);

        JButton loginButton = new JButton("Login");
        JButton signUpButton = new JButton("Sign-Up");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String enteredUsername = usernameField.getText();
                char[] enteredPasswordChars = passwordField.getPassword();
                String enteredPassword = new String(enteredPasswordChars);

                System.out.println("Entered Username: " + enteredUsername);
                System.out.println("Entered Password: " + enteredPassword);

                for (Parent parent : parentsList) {
                    if (parent.authenticate(enteredUsername, enteredPassword)) {
                        currentParent = parent;
                        createParentPanel();
                        return;
                    }
                }
                System.out.println("Authentication failed.");
                JOptionPane.showMessageDialog(frame, "Invalid username or password.",
                        "Authentication Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        signUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createSignUpPanel();
            }
        });

        loginPanel.add(usernameLabel);
        loginPanel.add(usernameField);
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(signUpButton);

        frame.setContentPane(loginPanel);
        frame.revalidate();
        frame.repaint();
        frame.setVisible(true);
    }

    private void createSignUpPanel() {
        JPanel signUpPanel = new JPanel();
        signUpPanel.setLayout(new GridLayout(4, 2));

        JLabel newUsernameLabel = new JLabel("New Username:");
        JLabel newPasswordLabel = new JLabel("New Password:");
        JLabel repeatPasswordLabel = new JLabel("Repeat Password:");
        newUsernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        newPasswordLabel.setHorizontalAlignment(SwingConstants.CENTER);
        repeatPasswordLabel.setHorizontalAlignment(SwingConstants.CENTER);

        newUsernameField = new JTextField(20);
        newPasswordField = new JPasswordField(20);
        JPasswordField repeatPasswordField = new JPasswordField(20);

        JButton signUpConfirmButton = new JButton("Confirm");
        JButton signUpBackButton = new JButton("Back");

        signUpConfirmButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newUsername = newUsernameField.getText();
                char[] newPasswordChars = newPasswordField.getPassword();
                char[] repeatPasswordChars = repeatPasswordField.getPassword();

                String newPassword = new String(newPasswordChars);
                String repeatPassword = new String(repeatPasswordChars);

                System.out.println("New Username: " + newUsername);
                System.out.println("New Password: " + newPassword);
                System.out.println("Repeat Password: " + repeatPassword);

                if (!newPassword.equals(repeatPassword)) {
                    JOptionPane.showMessageDialog(frame, "Passwords do not match.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Parent newParent = new Parent(newUsername, newPassword);
                parentsList.add(newParent);
                currentParent = newParent;
                createParentPanel();
            }
        });

        signUpBackButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createLoginPanel();
            }
        });

        signUpPanel.add(newUsernameLabel);
        signUpPanel.add(newUsernameField);
        signUpPanel.add(newPasswordLabel);
        signUpPanel.add(newPasswordField);
        signUpPanel.add(repeatPasswordLabel);
        signUpPanel.add(repeatPasswordField);
        signUpPanel.add(signUpConfirmButton);
        signUpPanel.add(signUpBackButton);

        frame.setContentPane(signUpPanel);
        frame.revalidate();
        frame.repaint();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        // Create an instance of the application
        ChildTaskTrackingApp.getInstance();
    }
}
