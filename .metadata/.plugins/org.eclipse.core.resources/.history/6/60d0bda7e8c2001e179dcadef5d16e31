import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

// ... (Your existing classes)

class ChildTaskTrackingApp {
    private JFrame frame;
    private Parent currentParent;
    private List<Parent> parentsList = new ArrayList<>();
    private JTextField newUsernameField;
    private JPasswordField newPasswordField;
    private List<Child> childrenList = new ArrayList<>();
    private Child currentChild;
    private JComboBox<String> childSelectionCombo;
    private List<String> childNames = new ArrayList<>();
    private static ChildTaskTrackingApp instance;

    public ChildTaskTrackingApp() {
        frame = new JFrame("Child Task Tracking App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);
        currentParent = null;
        currentChild = null;
        createLoginPanel();
        frame.setVisible(true);
    }

    private void createLoginPanel() {
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayout(3, 2));

        JLabel usernameLabel = new JLabel("Username:");
        JLabel passwordLabel = new JLabel("Password:");
        usernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        passwordLabel.setHorizontalAlignment(SwingConstants.CENTER);

        JTextField usernameField = new JTextField(20);
        JPasswordField passwordField = new JPasswordField(20);

        JButton loginButton = new JButton("Login");
        JButton signUpButton = new JButton("Sign-Up");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String enteredUsername = usernameField.getText();
                char[] enteredPasswordChars = passwordField.getPassword();
                String enteredPassword = new String(enteredPasswordChars);

                for (Parent parent : parentsList) {
                    if (parent.authenticate(enteredUsername, enteredPassword)) {
                        currentParent = parent;
                        createParentPanel();
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Invalid username or password.",
                        "Authentication Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        signUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createSignUpPanel();
            }
        });

        loginPanel.add(usernameLabel);
        loginPanel.add(usernameField);
        loginPanel.add(passwordLabel);
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        loginPanel.add(signUpButton);

        frame.setContentPane(loginPanel);
        frame.revalidate();
    }

    private void createSignUpPanel() {
        JPanel signUpPanel = new JPanel();
        signUpPanel.setLayout(new GridLayout(5, 1));

        JLabel usernameLabel = new JLabel("Username:");
        JLabel passwordLabel = new JLabel("Password:");
        usernameLabel.setHorizontalAlignment(SwingConstants.CENTER);
        passwordLabel.setHorizontalAlignment(SwingConstants.CENTER);

        newUsernameField = new JTextField(20);
        newPasswordField = new JPasswordField(20);
        JButton signUpButton = new JButton("Sign Up");

        signUpButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String newUsername = newUsernameField.getText();
                char[] newPasswordChars = newPasswordField.getPassword();
                String newPassword = new String(newPasswordChars);

                Parent newParent = new Parent(newUsername, newPassword);
                parentsList.add(newParent);
                childrenList.addAll(newParent.getChildren());

                newUsernameField.setText("");
                newPasswordField.setText("");

                createLoginPanel();
            }
        });

        signUpPanel.add(usernameLabel);
        signUpPanel.add(newUsernameField);
        signUpPanel.add(passwordLabel);
        signUpPanel.add(newPasswordField);
        signUpPanel.add(signUpButton);

        frame.setContentPane(signUpPanel);
        frame.revalidate();
    }

    private void createParentPanel() {
        JPanel parentPanel = new JPanel();
        parentPanel.setLayout(new FlowLayout(FlowLayout.CENTER));

        JPanel addChildPanel = new JPanel();
        JLabel childNameLabel = new JLabel("Child's Name:");
        JTextField childNameField = new JTextField(20);
        JButton addChildButton = new JButton("Add Child");

        addChildButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String childName = childNameField.getText();
                currentParent.addChild(childName);
                childSelectionCombo.addItem(childName);
                childNameField.setText("");
            }
        });

        JPanel assignTaskPanel = new JPanel();
        JButton assignTaskButton = new JButton("Assign Task");

        assignTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();
                Child selectedChildObject = null;

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        TaskAssignmentDialog dialog = new TaskAssignmentDialog(frame, child);
                        dialog.updateTaskList();
                        dialog.setVisible(true);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton switchToChildButton = new JButton("Switch to Child Panel");
        switchToChildButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createChildPanel();
            }
        });

        JButton trackAchievementButton = new JButton("Track Achievement");
        childSelectionCombo = new JComboBox<>();

        for (Parent parent : parentsList) {
            for (Child child : parent.getChildren()) {
                childSelectionCombo.addItem(child.getName());
            }
        }

        assignTaskPanel.add(childSelectionCombo);

        JButton suggestPrizeButton = new JButton("Suggest Prize");

        suggestPrizeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        String prizeSuggestion = child.suggestPrize();
                        JOptionPane.showMessageDialog(frame, prizeSuggestion, "Prize Suggestion", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        parentPanel.add(addChildPanel);
        parentPanel.add(assignTaskPanel);
        parentPanel.add(switchToChildButton);
        parentPanel.add(trackAchievementButton);
        parentPanel.add(suggestPrizeButton);
        parentPanel.add(exitButton);

        frame.setContentPane(parentPanel);
        frame.revalidate();
    }

    private void createChildPanel() {
        JPanel childPanel = new JPanel();
        childPanel.setLayout(new GridLayout(4, 1));

        JButton backButton = new JButton("Back");
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createParentPanel();
            }
        });

        JButton assignTaskButton = new JButton("Assign Task");
        assignTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedChildName = (String) childSelectionCombo.getSelectedItem();
                Child selectedChildObject = null;

                for (Child child : currentParent.getChildren()) {
                    if (child.getName().equals(selectedChildName)) {
                        TaskAssignmentDialog dialog = new TaskAssignmentDialog(frame, child);
                        dialog.updateTaskList();
                        dialog.setVisible(true);
                        return;
                    }
                }

                JOptionPane.showMessageDialog(frame, "Child not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        JButton exitButton = new JButton("Exit");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        childPanel.add(assignTaskButton);
        childPanel.add(backButton);
        childPanel.add(exitButton);

        frame.setContentPane(childPanel);
        frame.revalidate();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new ChildTaskTrackingApp());
    }
}
